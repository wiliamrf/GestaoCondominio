// <auto-generated />
using System;
using GC.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GC.Data.Migrations
{
    [DbContext(typeof(GCDbContext))]
    partial class GCDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GC.Business.Models.Apartamento", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroApto")
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Apartamentos");
                });

            modelBuilder.Entity("GC.Business.Models.Carro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApartamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cor")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carros");
                });

            modelBuilder.Entity("GC.Business.Models.Correspondecia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApartamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApartamentoId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Entrega")
                        .HasColumnType("datetime2");

                    b.Property<string>("Rastreio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Recebimento")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApartamentoId");

                    b.HasIndex("ApartamentoId1");

                    b.ToTable("Correspondeciaes");
                });

            modelBuilder.Entity("GC.Business.Models.Moto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApartamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cor")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Motos");
                });

            modelBuilder.Entity("GC.Business.Models.Apartamento", b =>
                {
                    b.HasOne("GC.Business.Models.Carro", "Carro")
                        .WithOne("Apartamento")
                        .HasForeignKey("GC.Business.Models.Apartamento", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GC.Business.Models.Moto", "Moto")
                        .WithOne("Apartamento")
                        .HasForeignKey("GC.Business.Models.Apartamento", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carro");

                    b.Navigation("Moto");
                });

            modelBuilder.Entity("GC.Business.Models.Correspondecia", b =>
                {
                    b.HasOne("GC.Business.Models.Apartamento", "Apartamento")
                        .WithMany()
                        .HasForeignKey("ApartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GC.Business.Models.Apartamento", null)
                        .WithMany("Correspondecias")
                        .HasForeignKey("ApartamentoId1");

                    b.Navigation("Apartamento");
                });

            modelBuilder.Entity("GC.Business.Models.Apartamento", b =>
                {
                    b.Navigation("Correspondecias");
                });

            modelBuilder.Entity("GC.Business.Models.Carro", b =>
                {
                    b.Navigation("Apartamento");
                });

            modelBuilder.Entity("GC.Business.Models.Moto", b =>
                {
                    b.Navigation("Apartamento");
                });
#pragma warning restore 612, 618
        }
    }
}
